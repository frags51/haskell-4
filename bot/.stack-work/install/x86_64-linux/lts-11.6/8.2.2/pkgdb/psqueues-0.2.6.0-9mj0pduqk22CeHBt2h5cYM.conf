name: psqueues
version: 0.2.6.0
id: psqueues-0.2.6.0-9mj0pduqk22CeHBt2h5cYM
key: psqueues-0.2.6.0-9mj0pduqk22CeHBt2h5cYM
license: BSD3
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
    to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
    (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
exposed: True
indefinite: False
exposed-modules:
    Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
abi: b078f92ce9e56d7705d1773ff6e51f50
trusted: False
import-dirs: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/lib/x86_64-linux-ghc-8.2.2/psqueues-0.2.6.0-9mj0pduqk22CeHBt2h5cYM
library-dirs: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/lib/x86_64-linux-ghc-8.2.2/psqueues-0.2.6.0-9mj0pduqk22CeHBt2h5cYM
dynamic-library-dirs: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/lib/x86_64-linux-ghc-8.2.2
data-dir: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/share/x86_64-linux-ghc-8.2.2/psqueues-0.2.6.0
hs-libraries: HSpsqueues-0.2.6.0-9mj0pduqk22CeHBt2h5cYM
depends:
    base-4.10.1.0 deepseq-1.4.3.0-LrrzFeokLC8Dvtq2AEgWKh
    hashable-1.2.7.0-7pKtmLQeC3p1yIBHpoaqjk ghc-prim-0.5.1.1
abi-depends: base-4.10.1.0=35a7f6be752ee4f7385cb5bf28677879
             deepseq-1.4.3.0-LrrzFeokLC8Dvtq2AEgWKh=c37688a0444a42ffa64643fa241b8f40
             hashable-1.2.7.0-7pKtmLQeC3p1yIBHpoaqjk=ce1493fb003a9a6bd069a4252a9d4d88
             ghc-prim-0.5.1.1=c8f3d173544d1472727fce7b0518abda
haddock-interfaces: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/doc/psqueues-0.2.6.0/psqueues.haddock
haddock-html: /home/supreet/Desktop/marvin/haskell-4/bot/.stack-work/install/x86_64-linux/lts-11.6/8.2.2/doc/psqueues-0.2.6.0
